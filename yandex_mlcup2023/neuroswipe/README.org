* NeuroSwipe

Представьте, что к вам обратился писатель V, у которого есть кабальный контракт с издательством. Ему нужно писать минимум один роман каждый год.

Писатель ведёт затворнический образ жизни, никому не доверяет и по каким-то странным соображениям пишет романы исключительно на своём смартфоне. Сроки сдачи рукописи близятся, но роман у автора созрел только в голове.

Помогите загадочному писателю повысить производительность и закончить свой opus magnum. Ваша задача — разработать модель, которая будет предсказывать слово, набранное с помощью свайпа по клавиатуре.

В вашем распоряжении:

    данные о траектории движения пальца по клавиатуре: координаты и время;
    слово, которое хочет набрать писатель;
    информация о раскладке клавиатуры.

* Задача

Вашей задачей будет предсказание слов, которые пользователи хотели ввести, набирая свайпом. Для оценки качества работы вашей модели рекомендуется использовать метрики, которые показывают степень согласованности предсказанных слов с теми, что хотел ввести пользователь. Такими метриками может выступать CER, Accuracy@k и др. Однако, в данном случае мы будем использовать специально разработанную для клавиатур метрику под названием Swipe MRR:

Swipe MRR = I[cand1 == target] + I[cand2 == target] * 0.1 + I[cand3 == target] * 0.09 + I[cand4 == target] * 0.08, где все кандидаты уникальны.

Применение метрики Swipe MRR обусловлено тем, что первый кандидат будет автоматически вписан в набранное сообщение, а остальные три будут предложены на панели выше для возможной замены. Такой подход позволяет оценить качество модели с учетом автоматической замены кандидатов на основе предпочтений пользователя, что является актуальным для клавиатурных предсказаний.
* Формат ввода
Описание данных

Данные предоставляются в формате JSON на каждой строке следующего содержания:

    word – таргет (слово, которое хотел ввести пользователь)
    curve
        x – массив координат X
        y – массив координат Y
        t – массив временных меток (время в миллисекундах)
        grid – формат раскладким
            grid_name – название раскладки (default или extra)
            width – ширина раскладки
            height – высота раскладки
            keys – массив клавиш
                label – символ клавиши
                hitbox – область нажатия
                    x – координата X верхнего левого угла
                    y – координата Y верхнего левого угла
                    w – ширина области
                    h – высота области

Основные наборы

Данные были собраны путем разметки, когда пользователей просили ввести слово, отображенное на экране, с использованием свайпа.

1) train.jsonl – содержит данные о кривых и слово, которое пользователь хотел ввести.

2) valid.jsonl – данные для валидации, с таргетом, хранящимся в valid.ref.

3) test.jsonl – данные, для которых вам нужно предсказать наиболее вероятные слова.

4) voc.txt – словарь с словами, которые могут быть таргетом. Важно отметить, что не обязательно для каждого слова из словаря существует соответствующий пример в контесте.

Скачать данные можно по ссылке.
Дополнительные наборы

Так же мы предоставляем дополнительный архив с кривыми, которые вводились пользователями в Яндекс.Клавиатуре:

1) suggestion_accepted - кривые, на которых пользователь явно выбрал какую-то подсказку вместо первой.

2) accepted - кривые, которые пользователь принял и продолжил дальнейший ввод без отмен. Возможно, распознавание сработало некорректно, и пользователь попросту не заметил ошибку.

Стоит отметить, что в данном наборе данных, в отличие от предыдущего, раскладки клавиатуры могут иметь произвольный вид: разные размеры по ширине и высоте, наличие или отсутствие дополнительных клавиш. Название сетки (grid_name) также может быть разнообразным и отличаться от "default" и "extra".

Скачать данные можно по ссылке.
* Формат вывода

Сохраните первые четыре кандидата для каждой кривой из файла
 test.jsonl в формате CSV без использования заголовков и индекса. Для
 этого используйте следующий код: df.to_csv(path, header=False,
 index=False).
* Примечания
Бейзлайн

DTW (Dynamic Time Warping) – метрика, которая помогает вычислить расстояние между двумя кривыми разной длины. В качестве бейзлайна используются первые слова, определенные по DTW между кривой пользователя и кривыми, составленными на основе центров кнопок букв на клавиатуре.

Вы можете попробовать запустить бейзлайн с помощью файла run_baseline.sh и затем загрузить ответ в контест. Ожидается, что вы получите значение метрики Swipe MRR@4: 0.248.
* Визуализация

Для лучшего понимания данных мы подготовили инструмент для визуализации данных. Вы можете запустить его с помощью файла run_viz.py (работает только на трейн данных, но вы можете адаптировать инструмент). Использование этого инструмента позволит вам наглядно увидеть и проанализировать предоставленные данные, что может помочь в создании более точной модели.

Скачать бейзлайн с визуализацией вы можете по ссылке.

Пример кривой и раскладки клавиатуры

[[./markdown-image.png]]
